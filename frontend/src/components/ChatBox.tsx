import React, { useState, useEffect } from 'react';
import MessageList from './MessageList';
import MessageInput from './MessageInput';

interface Message {
  id: string;
  text: string;
  sender: 'user' | 'assistant';
  timestamp: Date;
}

interface ChatBoxProps {
  isDarkMode: boolean;
  isConnected: boolean;
  modelStatus: 'loading' | 'ready' | 'error';
}

const ChatBox: React.FC<ChatBoxProps> = ({ isDarkMode, isConnected, modelStatus }) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [showMetrics, setShowMetrics] = useState(false);
  const [currentMetrics, setCurrentMetrics] = useState({
    inputTokens: 0,
    outputTokens: 0,
    responseTime: 0,
    tokensPerSecond: 0
  });

  // Initialize with welcome message
  useEffect(() => {
    if (messages.length === 0) {
      setMessages([{
        id: 'welcome',
        text: 'Hello! I\'m your AI assistant powered by Docker Model Runner. How can I help you today?',
        sender: 'assistant',
        timestamp: new Date()
      }]);
    }
  }, [messages.length]);

  const handleSendMessage = async (text: string) => {
    if (!isConnected || modelStatus !== 'ready') {
      alert('Model Runner is not connected. Please check your connection.');
      return;
    }

    const userMessage: Message = {
      id: Date.now().toString(),
      text,
      sender: 'user',
      timestamp: new Date(),
    };
    
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);
    
    const startTime = Date.now();
    const inputTokenCount = text.split(' ').length; // Rough estimate
    
    try {
      // Simulate API call to backend
      const response = await fetch('/api/chat', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ message: text }),
      });
      
      if (!response.ok) {
        throw new Error('Failed to get response from model');
      }
      
      // For now, simulate a response since we don't have the actual backend
      await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));
      
      const responseTime = Date.now() - startTime;
      const assistantResponse = `I received your message: "${text}". This is a simulated response from the Llama 3.2 model. In a real implementation, this would be generated by the actual model running in Docker Model Runner.`;
      const outputTokenCount = assistantResponse.split(' ').length;
      
      const assistantMessage: Message = {
        id: (Date.now() + 1).toString(),
        text: assistantResponse,
        sender: 'assistant',
        timestamp: new Date(),
      };
      
      setMessages(prev => [...prev, assistantMessage]);
      
      // Update metrics
      setCurrentMetrics({
        inputTokens: inputTokenCount,
        outputTokens: outputTokenCount,
        responseTime,
        tokensPerSecond: (outputTokenCount / (responseTime / 1000))
      });
      
    } catch (error) {
      console.error('Error sending message:', error);
      const errorMessage: Message = {
        id: (Date.now() + 2).toString(),
        text: 'Sorry, I encountered an error processing your request. Please make sure Docker Model Runner is running.',
        sender: 'assistant',
        timestamp: new Date(),
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  // Container styles
  const containerStyles: React.CSSProperties = {
    display: 'flex',
    height: 'calc(100vh - 140px)',
    backgroundColor: isDarkMode ? '#111827' : '#f8fafc',
    gap: '1rem',
    padding: '1rem'
  };

  const chatStyles: React.CSSProperties = {
    flex: showMetrics ? '2' : '1',
    display: 'flex',
    flexDirection: 'column',
    backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',
    borderRadius: '0.75rem',
    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,
    overflow: 'hidden',
    boxShadow: isDarkMode 
      ? '0 4px 6px rgba(0, 0, 0, 0.3)' 
      : '0 4px 6px rgba(0, 0, 0, 0.1)',
  };

  const metricsStyles: React.CSSProperties = {
    flex: '1',
    backgroundColor: isDarkMode ? '#1f2937' : '#ffffff',
    borderRadius: '0.75rem',
    border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,
    padding: '1rem',
    boxShadow: isDarkMode 
      ? '0 4px 6px rgba(0, 0, 0, 0.3)' 
      : '0 4px 6px rgba(0, 0, 0, 0.1)',
  };

  const headerStyles: React.CSSProperties = {
    display: 'flex',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: '1rem 1.5rem',
    borderBottom: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,
    backgroundColor: isDarkMode ? '#111827' : '#f9fafb',
  };

  const statusIndicatorStyles: React.CSSProperties = {
    display: 'flex',
    alignItems: 'center',
    gap: '0.5rem',
    fontSize: '0.875rem',
    color: isDarkMode ? '#9ca3af' : '#6b7280'
  };

  const getStatusColor = () => {
    if (!isConnected) return '#ef4444';
    if (modelStatus === 'ready') return '#10b981';
    if (modelStatus === 'loading') return '#f59e0b';
    return '#ef4444';
  };

  const getStatusText = () => {
    if (!isConnected) return 'Disconnected';
    if (modelStatus === 'ready') return 'Model Ready';
    if (modelStatus === 'loading') return 'Loading Model';
    return 'Model Error';
  };

  return (
    <div style={containerStyles}>
      {/* Chat Interface */}
      <div style={chatStyles}>
        {/* Chat Header */}
        <div style={headerStyles}>
          <div>
            <h2 style={{ margin: 0, fontSize: '1.25rem', fontWeight: '600' }}>
              ðŸ’¬ AI Chat
            </h2>
            <div style={statusIndicatorStyles}>
              <span style={{
                display: 'inline-block',
                width: '8px',
                height: '8px',
                borderRadius: '50%',
                backgroundColor: getStatusColor()
              }}></span>
              {getStatusText()}
            </div>
          </div>
          
          <button
            onClick={() => setShowMetrics(!showMetrics)}
            style={{
              padding: '0.5rem 1rem',
              borderRadius: '0.5rem',
              border: `1px solid ${isDarkMode ? '#374151' : '#d1d5db'}`,
              backgroundColor: showMetrics 
                ? (isDarkMode ? '#3b82f6' : '#3b82f6')
                : (isDarkMode ? '#374151' : '#ffffff'),
              color: showMetrics ? '#ffffff' : (isDarkMode ? '#ffffff' : '#1f2937'),
              cursor: 'pointer',
              fontSize: '0.875rem',
              fontWeight: '500'
            }}
          >
            {showMetrics ? 'ðŸ“Š Hide Metrics' : 'ðŸ“ˆ Show Metrics'}
          </button>
        </div>

        {/* Messages Area */}
        <MessageList 
          messages={messages} 
          isDarkMode={isDarkMode}
          isLoading={isLoading}
        />

        {/* Input Area */}
        <MessageInput 
          onSendMessage={handleSendMessage} 
          isDarkMode={isDarkMode}
          disabled={!isConnected || modelStatus !== 'ready' || isLoading}
        />
      </div>

      {/* Live Metrics Panel */}
      {showMetrics && (
        <div style={metricsStyles}>
          <h3 style={{ 
            margin: '0 0 1rem 0', 
            fontSize: '1.125rem', 
            fontWeight: '600',
            color: isDarkMode ? '#ffffff' : '#1f2937'
          }}>
            ðŸ“Š Live Metrics
          </h3>
          
          <div style={{ display: 'flex', flexDirection: 'column', gap: '1rem' }}>
            <div style={{
              padding: '1rem',
              backgroundColor: isDarkMode ? '#111827' : '#f8fafc',
              borderRadius: '0.5rem',
              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`
            }}>
              <div style={{ fontSize: '0.75rem', color: isDarkMode ? '#9ca3af' : '#6b7280', marginBottom: '0.25rem' }}>
                Response Time
              </div>
              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#3b82f6' }}>
                {currentMetrics.responseTime}ms
              </div>
            </div>
            
            <div style={{
              padding: '1rem',
              backgroundColor: isDarkMode ? '#111827' : '#f8fafc',
              borderRadius: '0.5rem',
              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`
            }}>
              <div style={{ fontSize: '0.75rem', color: isDarkMode ? '#9ca3af' : '#6b7280', marginBottom: '0.25rem' }}>
                Tokens/Second
              </div>
              <div style={{ fontSize: '1.5rem', fontWeight: 'bold', color: '#10b981' }}>
                {currentMetrics.tokensPerSecond.toFixed(1)}
              </div>
            </div>
            
            <div style={{
              padding: '1rem',
              backgroundColor: isDarkMode ? '#111827' : '#f8fafc',
              borderRadius: '0.5rem',
              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`
            }}>
              <div style={{ fontSize: '0.75rem', color: isDarkMode ? '#9ca3af' : '#6b7280', marginBottom: '0.5rem' }}>
                Token Usage
              </div>
              <div style={{ display: 'flex', justifyContent: 'space-between' }}>
                <div>
                  <div style={{ fontSize: '1rem', fontWeight: 'bold', color: '#f59e0b' }}>
                    {currentMetrics.inputTokens}
                  </div>
                  <div style={{ fontSize: '0.75rem' }}>Input</div>
                </div>
                <div>
                  <div style={{ fontSize: '1rem', fontWeight: 'bold', color: '#8b5cf6' }}>
                    {currentMetrics.outputTokens}
                  </div>
                  <div style={{ fontSize: '0.75rem' }}>Output</div>
                </div>
              </div>
            </div>
            
            <div style={{
              padding: '1rem',
              backgroundColor: isDarkMode ? '#111827' : '#f8fafc',
              borderRadius: '0.5rem',
              border: `1px solid ${isDarkMode ? '#374151' : '#e5e7eb'}`,
              textAlign: 'center'
            }}>
              <a
                href="http://localhost:3001"
                target="_blank"
                rel="noopener noreferrer"
                style={{
                  color: '#3b82f6',
                  textDecoration: 'none',
                  fontSize: '0.875rem',
                  fontWeight: '500'
                }}
              >
                ðŸ“Š View Detailed Dashboard
              </a>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default ChatBox;